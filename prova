version: "3.8"
services:
  postgres:
    image: postgres
    container_name: postgres
    environment:
      - name=value
    ports:
      - "5432:5432"
    volumes:
      - .database/database_seeding.sql:/docker-entrypoint-initdb.d/database_seeding.sql

    command: tail -f /dev/null questo comando nel docker compose serve per mantenere il container attivo 
    in modo da testare il codice al suo interno in tempo reale


ssh-keygen -t rsa -b 4096 -m PEM -f jwtRS256.key

openssl rsa -in jwtRS256.key -pubout -outform PEM -out jwtRS256.key.pub
cat jwtRS256.key
cat jwtRS256.key.pub      




  // Create (static method)
  public static async createParking(name: string, parking_spots: number, occupied_spots: number, day_starting_hour: string, day_finishing_hour: string): Promise<Parking> {
    return await this.create({ name, parking_spots, occupied_spots, day_starting_hour, day_finishing_hour });
  }

  // Read (instance method)
  public async getInfo(): Promise<ParkingAttributes> {
    return await this.toJSON();
  }

  // Update (instance method)
  public async updateParking(name?: string, parking_spots?: number, occupied_spots?: number, day_starting_hour?: string, day_finishing_hour?: string): Promise<void> {
    this.name = name || this.name;
    this.parking_spots = parking_spots || this.parking_spots;
    this.occupied_spots = occupied_spots || this.occupied_spots;
    this.day_starting_hour = day_starting_hour || this.day_starting_hour;
    this.day_finishing_hour = day_finishing_hour || this.day_finishing_hour;
    await this.save();
  }

  // Delete (static method)
  public static async deleteParking(id: number): Promise<void> {
    const parking = await this.findByPk(id);
    if (parking) {
      await parking.destroy();
    }
  
